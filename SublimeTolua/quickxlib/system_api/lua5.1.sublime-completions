
{
	"scope": "source.lua",
	"completions": 
	[
		"arg","and","break","do","else","elseif","end","false","for","function","if","in","local","nil","not","or","repeat","return","then","true","until","while","_G","_VERSION", 
		{ "trigger": "assert(v[,message])", "contents": "assert(${1:v}${2:[,message]})" }, 
		{ "trigger": "collectgarbage([opt[,arg]])", "contents": "collectgarbage(${1:[opt}${2:[,arg]]})" }, 
		{ "trigger": "dofile([filename])", "contents": "dofile(${1:[filename]})" }, 
		{ "trigger": "error(message[,level])", "contents": "error(${1:message}${2:[,level]})" }, 
		{ "trigger": "getfenv([f])", "contents": "getfenv(${1:[f]})" }, 
		{ "trigger": "getmetatable(object)", "contents": "getmetatable(${1:object})" }, 
		{ "trigger": "ipairs(t)", "contents": "ipairs(${1:t})" }, 
		{ "trigger": "load(func[,chunkname])", "contents": "load(${1:func}${2:[,chunkname]})" }, 
		{ "trigger": "loadfile([filename])", "contents": "loadfile(${1:[filename]})" }, 
		{ "trigger": "loadstring(string[,chunkname])", "contents": "loadstring(${1:string}${2:[,chunkname]})" }, 
		{ "trigger": "module(name[,···])", "contents": "module(${1:name}${2:[,···]})" }, 
		{ "trigger": "next(table[,index])", "contents": "next(${1:table}${2:[,index]})" }, 
		{ "trigger": "pairs(t)", "contents": "pairs(${1:t})" }, 
		{ "trigger": "pcall(f,arg1,···)", "contents": "pcall(${1:f}, ${2:arg1}, ${3:···})" }, 
		{ "trigger": "print(···)", "contents": "print(${1:···})" }, 
		{ "trigger": "rawequal(v1,v2)", "contents": "rawequal(${1:v1}, ${2:v2})" }, 
		{ "trigger": "rawget(table,index)", "contents": "rawget(${1:table}, ${2:index})" }, 
		{ "trigger": "rawset(table,index,value)", "contents": "rawset(${1:table}, ${2:index}, ${3:value})" }, 
		{ "trigger": "require(modname)", "contents": "require(${1:modname})" }, 
		{ "trigger": "select(index,···)", "contents": "select(${1:index}, ${2:···})" }, 
		{ "trigger": "setfenv(f,table)", "contents": "setfenv(${1:f}, ${2:table})" }, 
		{ "trigger": "setmetatable(table,metatable)", "contents": "setmetatable(${1:table}, ${2:metatable})" }, 
		{ "trigger": "tonumber(e[,base])", "contents": "tonumber(${1:e}${2:[,base]})" }, 
		{ "trigger": "tostring(e)", "contents": "tostring(${1:e})" }, 
		{ "trigger": "type(v)", "contents": "type(${1:v})" }, 
		{ "trigger": "unpack(list[,i[,j]])", "contents": "unpack(${1:list}${2:[,i}${3:[,j]]})" }, 
		{ "trigger": "xpcall(f,err)", "contents": "xpcall(${1:f}, ${2:err})" }, 
		{ "trigger": "coroutine.create(f)", "contents": "coroutine.create(${1:f})" }, 
		{ "trigger": "coroutine.resume(co[,val1,···])", "contents": "coroutine.resume(${1:co}${2:[,val1,···]})" }, 
		{ "trigger": "coroutine.running()", "contents": "coroutine.running()" }, 
		{ "trigger": "coroutine.status(co)", "contents": "coroutine.status(${1:co})" }, 
		{ "trigger": "coroutine.wrap(f)", "contents": "coroutine.wrap(${1:f})" }, 
		{ "trigger": "coroutine.yield(···)", "contents": "coroutine.yield(${1:···})" }, 
		{ "trigger": "debug.debug()", "contents": "debug.debug()" }, 
		{ "trigger": "debug.getfenv(o)", "contents": "debug.getfenv(${1:o})" }, 
		{ "trigger": "debug.gethook([thread])", "contents": "debug.gethook(${1:[thread]})" }, 
		{ "trigger": "debug.getinfo([thread,]function[,what])", "contents": "debug.getinfo(${1:[thread,]function}${2:[,what]})" }, 
		{ "trigger": "debug.getlocal([thread,]level,local)", "contents": "debug.getlocal(${1:[thread,]level,local})" }, 
		{ "trigger": "debug.getmetatable(object)", "contents": "debug.getmetatable(${1:object})" }, 
		{ "trigger": "debug.getregistry()", "contents": "debug.getregistry()" }, 
		{ "trigger": "debug.getupvalue(func,up)", "contents": "debug.getupvalue(${1:func}, ${2:up})" }, 
		{ "trigger": "debug.setfenv(object,table)", "contents": "debug.setfenv(${1:object}, ${2:table})" }, 
		{ "trigger": "debug.sethook([thread,]hook,mask[,count])", "contents": "debug.sethook(${1:[thread,]hook,mask}${2:[,count]})" }, 
		{ "trigger": "debug.setlocal([thread,]level,local,value)", "contents": "debug.setlocal(${1:[thread,]level,local,value})" }, 
		{ "trigger": "debug.setmetatable(object,table)", "contents": "debug.setmetatable(${1:object}, ${2:table})" }, 
		{ "trigger": "debug.setupvalue(func,up,value)", "contents": "debug.setupvalue(${1:func}, ${2:up}, ${3:value})" }, 
		{ "trigger": "debug.traceback([thread,][message[,level]])", "contents": "debug.traceback(${1:[thread,]}${2:[message}${3:[,level]]})" }, 
		{ "trigger": "file:close()", "contents": "file:close()" }, 
		{ "trigger": "file:flush()", "contents": "file:flush()" }, 
		{ "trigger": "file:lines()", "contents": "file:lines()" }, 
		{ "trigger": "file:read(···)", "contents": "file:read(${1:···})" }, 
		{ "trigger": "file:seek([whence][,offset])", "contents": "file:seek(${1:[whence]}${2:[,offset]})" }, 
		{ "trigger": "file:setvbuf(mode[,size])", "contents": "file:setvbuf(${1:mode}${2:[,size]})" }, 
		{ "trigger": "file:write(···)", "contents": "file:write(${1:···})" }, 
		{ "trigger": "io.close([file])", "contents": "io.close(${1:[file]})" }, 
		{ "trigger": "io.flush()", "contents": "io.flush()" }, 
		{ "trigger": "io.input([file])", "contents": "io.input(${1:[file]})" }, 
		{ "trigger": "io.lines([filename])", "contents": "io.lines(${1:[filename]})" }, 
		{ "trigger": "io.open(filename[,mode])", "contents": "io.open(${1:filename}${2:[,mode]})" }, 
		{ "trigger": "io.output([file])", "contents": "io.output(${1:[file]})" }, 
		{ "trigger": "io.popen(prog[,mode])", "contents": "io.popen(${1:prog}${2:[,mode]})" }, 
		{ "trigger": "io.read(···)", "contents": "io.read(${1:···})" }, 
		{ "trigger": "io.tmpfile()", "contents": "io.tmpfile()" }, 
		{ "trigger": "io.type(obj)", "contents": "io.type(${1:obj})" }, 
		{ "trigger": "io.write(···)", "contents": "io.write(${1:···})" }, 
		{ "trigger": "math.abs(x)", "contents": "math.abs(${1:x})" }, 
		{ "trigger": "math.acos(x)", "contents": "math.acos(${1:x})" }, 
		{ "trigger": "math.asin(x)", "contents": "math.asin(${1:x})" }, 
		{ "trigger": "math.atan(x)", "contents": "math.atan(${1:x})" }, 
		{ "trigger": "math.atan2(y,x)", "contents": "math.atan2(${1:y}, ${2:x})" }, 
		{ "trigger": "math.ceil(x)", "contents": "math.ceil(${1:x})" }, 
		{ "trigger": "math.cos(x)", "contents": "math.cos(${1:x})" }, 
		{ "trigger": "math.cosh(x)", "contents": "math.cosh(${1:x})" }, 
		{ "trigger": "math.deg(x)", "contents": "math.deg(${1:x})" }, 
		{ "trigger": "math.exp(x)", "contents": "math.exp(${1:x})" }, 
		{ "trigger": "math.floor(x)", "contents": "math.floor(${1:x})" }, 
		{ "trigger": "math.fmod(x,y)", "contents": "math.fmod(${1:x}, ${2:y})" }, 
		{ "trigger": "math.frexp(x)", "contents": "math.frexp(${1:x})" },
		"math.huge", 
		{ "trigger": "math.ldexp(m,e)", "contents": "math.ldexp(${1:m}, ${2:e})" }, 
		{ "trigger": "math.log(x)", "contents": "math.log(${1:x})" }, 
		{ "trigger": "math.log10(x)", "contents": "math.log10(${1:x})" }, 
		{ "trigger": "math.max(x,···)", "contents": "math.max(${1:x}, ${2:···})" }, 
		{ "trigger": "math.min(x,···)", "contents": "math.min(${1:x}, ${2:···})" }, 
		{ "trigger": "math.modf(x)", "contents": "math.modf(${1:x})" },
		"math.pi", 
		{ "trigger": "math.pow(x,y)", "contents": "math.pow(${1:x}, ${2:y})" }, 
		{ "trigger": "math.rad(x)", "contents": "math.rad(${1:x})" }, 
		{ "trigger": "math.random([m[,n]])", "contents": "math.random(${1:[m}${2:[,n]]})" }, 
		{ "trigger": "math.randomseed(x)", "contents": "math.randomseed(${1:x})" }, 
		{ "trigger": "math.sin(x)", "contents": "math.sin(${1:x})" }, 
		{ "trigger": "math.sinh(x)", "contents": "math.sinh(${1:x})" }, 
		{ "trigger": "math.sqrt(x)", "contents": "math.sqrt(${1:x})" }, 
		{ "trigger": "math.tan(x)", "contents": "math.tan(${1:x})" }, 
		{ "trigger": "math.tanh(x)", "contents": "math.tanh(${1:x})" }, 
		{ "trigger": "os.clock()", "contents": "os.clock()" }, 
		{ "trigger": "os.date([format[,time]])", "contents": "os.date(${1:[format}${2:[,time]]})" }, 
		{ "trigger": "os.difftime(t2,t1)", "contents": "os.difftime(${1:t2}, ${2:t1})" }, 
		{ "trigger": "os.execute([command])", "contents": "os.execute(${1:[command]})" }, 
		{ "trigger": "os.exit([code])", "contents": "os.exit(${1:[code]})" }, 
		{ "trigger": "os.getenv(varname)", "contents": "os.getenv(${1:varname})" }, 
		{ "trigger": "os.remove(filename)", "contents": "os.remove(${1:filename})" }, 
		{ "trigger": "os.rename(oldname,newname)", "contents": "os.rename(${1:oldname}, ${2:newname})" }, 
		{ "trigger": "os.setlocale(locale[,category])", "contents": "os.setlocale(${1:locale}${2:[,category]})" }, 
		{ "trigger": "os.time([table])", "contents": "os.time(${1:[table]})" }, 
		{ "trigger": "os.tmpname()", "contents": "os.tmpname()" },
		"package.cpath",
		"package.loaded",
		"package.loaders", 
		{ "trigger": "package.loadlib(libname,funcname)", "contents": "package.loadlib(${1:libname}, ${2:funcname})" },
		"package.path",
		"package.preload", 
		{ "trigger": "package.seeall(module)", "contents": "package.seeall(${1:module})" }, 
		{ "trigger": "string.byte(s[,i[,j]])", "contents": "string.byte(${1:s}${2:[,i}${3:[,j]]})" }, 
		{ "trigger": "string.char(···)", "contents": "string.char(${1:···})" }, 
		{ "trigger": "string.dump(function)", "contents": "string.dump(${1:function})" }, 
		{ "trigger": "string.find(s,pattern[,init[,plain]])", "contents": "string.find(${1:s}, ${2:pattern}${3:[,init}${4:[,plain]]})" }, 
		{ "trigger": "string.format(formatstring,···)", "contents": "string.format(${1:formatstring}, ${2:···})" }, 
		{ "trigger": "string.gmatch(s,pattern)", "contents": "string.gmatch(${1:s}, ${2:pattern})" }, 
		{ "trigger": "string.gsub(s,pattern,repl[,n])", "contents": "string.gsub(${1:s}, ${2:pattern}, ${3:repl}${4:[,n]})" }, 
		{ "trigger": "string.len(s)", "contents": "string.len(${1:s})" }, 
		{ "trigger": "string.lower(s)", "contents": "string.lower(${1:s})" }, 
		{ "trigger": "string.match(s,pattern[,init])", "contents": "string.match(${1:s}, ${2:pattern}${3:[,init]})" }, 
		{ "trigger": "string.rep(s,n)", "contents": "string.rep(${1:s}, ${2:n})" }, 
		{ "trigger": "string.reverse(s)", "contents": "string.reverse(${1:s})" }, 
		{ "trigger": "string.sub(s,i[,j])", "contents": "string.sub(${1:s}, ${2:i}${3:[,j]})" }, 
		{ "trigger": "string.upper(s)", "contents": "string.upper(${1:s})" }, 
		{ "trigger": "table.concat(table[,sep[,i[,j]]])", "contents": "table.concat(${1:table}${2:[,sep}${3:[,i}${4:[,j]]]})" }, 
		{ "trigger": "table.insert(table,[pos,]value)", "contents": "table.insert(${1:table}, ${2:[pos,]value})" }, 
		{ "trigger": "table.maxn(table)", "contents": "table.maxn(${1:table})" }, 
		{ "trigger": "table.remove(table[,pos])", "contents": "table.remove(${1:table}${2:[,pos]})" }, 
		{ "trigger": "table.sort(table[,comp])", "contents": "table.sort(${1:table}${2:[,comp]})" }
	]
}
